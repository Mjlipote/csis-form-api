package tw.edu.ym.csis.maindb.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class DeletedContentExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table DELETEDCONTENT
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table DELETEDCONTENT
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table DELETEDCONTENT
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DELETEDCONTENT
     *
     * @mbggenerated
     */
    public DeletedContentExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DELETEDCONTENT
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DELETEDCONTENT
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DELETEDCONTENT
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DELETEDCONTENT
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DELETEDCONTENT
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DELETEDCONTENT
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DELETEDCONTENT
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DELETEDCONTENT
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DELETEDCONTENT
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table DELETEDCONTENT
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table DELETEDCONTENT
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("ID is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("ID =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("ID <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("ID >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("ID >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("ID <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("ID <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("ID in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("ID not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("ID between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("ID not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andPersonidIsNull() {
            addCriterion("PERSONID is null");
            return (Criteria) this;
        }

        public Criteria andPersonidIsNotNull() {
            addCriterion("PERSONID is not null");
            return (Criteria) this;
        }

        public Criteria andPersonidEqualTo(Long value) {
            addCriterion("PERSONID =", value, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidNotEqualTo(Long value) {
            addCriterion("PERSONID <>", value, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidGreaterThan(Long value) {
            addCriterion("PERSONID >", value, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidGreaterThanOrEqualTo(Long value) {
            addCriterion("PERSONID >=", value, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidLessThan(Long value) {
            addCriterion("PERSONID <", value, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidLessThanOrEqualTo(Long value) {
            addCriterion("PERSONID <=", value, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidIn(List<Long> values) {
            addCriterion("PERSONID in", values, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidNotIn(List<Long> values) {
            addCriterion("PERSONID not in", values, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidBetween(Long value1, Long value2) {
            addCriterion("PERSONID between", value1, value2, "personid");
            return (Criteria) this;
        }

        public Criteria andPersonidNotBetween(Long value1, Long value2) {
            addCriterion("PERSONID not between", value1, value2, "personid");
            return (Criteria) this;
        }

        public Criteria andActiontimestampIsNull() {
            addCriterion("ACTIONTIMESTAMP is null");
            return (Criteria) this;
        }

        public Criteria andActiontimestampIsNotNull() {
            addCriterion("ACTIONTIMESTAMP is not null");
            return (Criteria) this;
        }

        public Criteria andActiontimestampEqualTo(Date value) {
            addCriterionForJDBCDate("ACTIONTIMESTAMP =", value, "actiontimestamp");
            return (Criteria) this;
        }

        public Criteria andActiontimestampNotEqualTo(Date value) {
            addCriterionForJDBCDate("ACTIONTIMESTAMP <>", value, "actiontimestamp");
            return (Criteria) this;
        }

        public Criteria andActiontimestampGreaterThan(Date value) {
            addCriterionForJDBCDate("ACTIONTIMESTAMP >", value, "actiontimestamp");
            return (Criteria) this;
        }

        public Criteria andActiontimestampGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("ACTIONTIMESTAMP >=", value, "actiontimestamp");
            return (Criteria) this;
        }

        public Criteria andActiontimestampLessThan(Date value) {
            addCriterionForJDBCDate("ACTIONTIMESTAMP <", value, "actiontimestamp");
            return (Criteria) this;
        }

        public Criteria andActiontimestampLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("ACTIONTIMESTAMP <=", value, "actiontimestamp");
            return (Criteria) this;
        }

        public Criteria andActiontimestampIn(List<Date> values) {
            addCriterionForJDBCDate("ACTIONTIMESTAMP in", values, "actiontimestamp");
            return (Criteria) this;
        }

        public Criteria andActiontimestampNotIn(List<Date> values) {
            addCriterionForJDBCDate("ACTIONTIMESTAMP not in", values, "actiontimestamp");
            return (Criteria) this;
        }

        public Criteria andActiontimestampBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("ACTIONTIMESTAMP between", value1, value2, "actiontimestamp");
            return (Criteria) this;
        }

        public Criteria andActiontimestampNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("ACTIONTIMESTAMP not between", value1, value2, "actiontimestamp");
            return (Criteria) this;
        }

        public Criteria andClobcontentidIsNull() {
            addCriterion("CLOBCONTENTID is null");
            return (Criteria) this;
        }

        public Criteria andClobcontentidIsNotNull() {
            addCriterion("CLOBCONTENTID is not null");
            return (Criteria) this;
        }

        public Criteria andClobcontentidEqualTo(Long value) {
            addCriterion("CLOBCONTENTID =", value, "clobcontentid");
            return (Criteria) this;
        }

        public Criteria andClobcontentidNotEqualTo(Long value) {
            addCriterion("CLOBCONTENTID <>", value, "clobcontentid");
            return (Criteria) this;
        }

        public Criteria andClobcontentidGreaterThan(Long value) {
            addCriterion("CLOBCONTENTID >", value, "clobcontentid");
            return (Criteria) this;
        }

        public Criteria andClobcontentidGreaterThanOrEqualTo(Long value) {
            addCriterion("CLOBCONTENTID >=", value, "clobcontentid");
            return (Criteria) this;
        }

        public Criteria andClobcontentidLessThan(Long value) {
            addCriterion("CLOBCONTENTID <", value, "clobcontentid");
            return (Criteria) this;
        }

        public Criteria andClobcontentidLessThanOrEqualTo(Long value) {
            addCriterion("CLOBCONTENTID <=", value, "clobcontentid");
            return (Criteria) this;
        }

        public Criteria andClobcontentidIn(List<Long> values) {
            addCriterion("CLOBCONTENTID in", values, "clobcontentid");
            return (Criteria) this;
        }

        public Criteria andClobcontentidNotIn(List<Long> values) {
            addCriterion("CLOBCONTENTID not in", values, "clobcontentid");
            return (Criteria) this;
        }

        public Criteria andClobcontentidBetween(Long value1, Long value2) {
            addCriterion("CLOBCONTENTID between", value1, value2, "clobcontentid");
            return (Criteria) this;
        }

        public Criteria andClobcontentidNotBetween(Long value1, Long value2) {
            addCriterion("CLOBCONTENTID not between", value1, value2, "clobcontentid");
            return (Criteria) this;
        }

        public Criteria andClobcontenttypeIsNull() {
            addCriterion("CLOBCONTENTTYPE is null");
            return (Criteria) this;
        }

        public Criteria andClobcontenttypeIsNotNull() {
            addCriterion("CLOBCONTENTTYPE is not null");
            return (Criteria) this;
        }

        public Criteria andClobcontenttypeEqualTo(String value) {
            addCriterion("CLOBCONTENTTYPE =", value, "clobcontenttype");
            return (Criteria) this;
        }

        public Criteria andClobcontenttypeNotEqualTo(String value) {
            addCriterion("CLOBCONTENTTYPE <>", value, "clobcontenttype");
            return (Criteria) this;
        }

        public Criteria andClobcontenttypeGreaterThan(String value) {
            addCriterion("CLOBCONTENTTYPE >", value, "clobcontenttype");
            return (Criteria) this;
        }

        public Criteria andClobcontenttypeGreaterThanOrEqualTo(String value) {
            addCriterion("CLOBCONTENTTYPE >=", value, "clobcontenttype");
            return (Criteria) this;
        }

        public Criteria andClobcontenttypeLessThan(String value) {
            addCriterion("CLOBCONTENTTYPE <", value, "clobcontenttype");
            return (Criteria) this;
        }

        public Criteria andClobcontenttypeLessThanOrEqualTo(String value) {
            addCriterion("CLOBCONTENTTYPE <=", value, "clobcontenttype");
            return (Criteria) this;
        }

        public Criteria andClobcontenttypeLike(String value) {
            addCriterion("CLOBCONTENTTYPE like", value, "clobcontenttype");
            return (Criteria) this;
        }

        public Criteria andClobcontenttypeNotLike(String value) {
            addCriterion("CLOBCONTENTTYPE not like", value, "clobcontenttype");
            return (Criteria) this;
        }

        public Criteria andClobcontenttypeIn(List<String> values) {
            addCriterion("CLOBCONTENTTYPE in", values, "clobcontenttype");
            return (Criteria) this;
        }

        public Criteria andClobcontenttypeNotIn(List<String> values) {
            addCriterion("CLOBCONTENTTYPE not in", values, "clobcontenttype");
            return (Criteria) this;
        }

        public Criteria andClobcontenttypeBetween(String value1, String value2) {
            addCriterion("CLOBCONTENTTYPE between", value1, value2, "clobcontenttype");
            return (Criteria) this;
        }

        public Criteria andClobcontenttypeNotBetween(String value1, String value2) {
            addCriterion("CLOBCONTENTTYPE not between", value1, value2, "clobcontenttype");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table DELETEDCONTENT
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table DELETEDCONTENT
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}