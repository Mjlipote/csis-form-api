package tw.edu.ym.csis.maindb.model;

import java.util.ArrayList;
import java.util.List;

public class LogicalExpressionExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table LOGICALEXPRESSION
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table LOGICALEXPRESSION
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table LOGICALEXPRESSION
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOGICALEXPRESSION
     *
     * @mbggenerated
     */
    public LogicalExpressionExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOGICALEXPRESSION
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOGICALEXPRESSION
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOGICALEXPRESSION
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOGICALEXPRESSION
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOGICALEXPRESSION
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOGICALEXPRESSION
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOGICALEXPRESSION
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOGICALEXPRESSION
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOGICALEXPRESSION
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOGICALEXPRESSION
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table LOGICALEXPRESSION
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("ID is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("ID =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("ID <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("ID >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("ID >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("ID <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("ID <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("ID in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("ID not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("ID between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("ID not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andSavedqueryidIsNull() {
            addCriterion("SAVEDQUERYID is null");
            return (Criteria) this;
        }

        public Criteria andSavedqueryidIsNotNull() {
            addCriterion("SAVEDQUERYID is not null");
            return (Criteria) this;
        }

        public Criteria andSavedqueryidEqualTo(Long value) {
            addCriterion("SAVEDQUERYID =", value, "savedqueryid");
            return (Criteria) this;
        }

        public Criteria andSavedqueryidNotEqualTo(Long value) {
            addCriterion("SAVEDQUERYID <>", value, "savedqueryid");
            return (Criteria) this;
        }

        public Criteria andSavedqueryidGreaterThan(Long value) {
            addCriterion("SAVEDQUERYID >", value, "savedqueryid");
            return (Criteria) this;
        }

        public Criteria andSavedqueryidGreaterThanOrEqualTo(Long value) {
            addCriterion("SAVEDQUERYID >=", value, "savedqueryid");
            return (Criteria) this;
        }

        public Criteria andSavedqueryidLessThan(Long value) {
            addCriterion("SAVEDQUERYID <", value, "savedqueryid");
            return (Criteria) this;
        }

        public Criteria andSavedqueryidLessThanOrEqualTo(Long value) {
            addCriterion("SAVEDQUERYID <=", value, "savedqueryid");
            return (Criteria) this;
        }

        public Criteria andSavedqueryidIn(List<Long> values) {
            addCriterion("SAVEDQUERYID in", values, "savedqueryid");
            return (Criteria) this;
        }

        public Criteria andSavedqueryidNotIn(List<Long> values) {
            addCriterion("SAVEDQUERYID not in", values, "savedqueryid");
            return (Criteria) this;
        }

        public Criteria andSavedqueryidBetween(Long value1, Long value2) {
            addCriterion("SAVEDQUERYID between", value1, value2, "savedqueryid");
            return (Criteria) this;
        }

        public Criteria andSavedqueryidNotBetween(Long value1, Long value2) {
            addCriterion("SAVEDQUERYID not between", value1, value2, "savedqueryid");
            return (Criteria) this;
        }

        public Criteria andLogoperatorcodeIsNull() {
            addCriterion("LOGOPERATORCODE is null");
            return (Criteria) this;
        }

        public Criteria andLogoperatorcodeIsNotNull() {
            addCriterion("LOGOPERATORCODE is not null");
            return (Criteria) this;
        }

        public Criteria andLogoperatorcodeEqualTo(String value) {
            addCriterion("LOGOPERATORCODE =", value, "logoperatorcode");
            return (Criteria) this;
        }

        public Criteria andLogoperatorcodeNotEqualTo(String value) {
            addCriterion("LOGOPERATORCODE <>", value, "logoperatorcode");
            return (Criteria) this;
        }

        public Criteria andLogoperatorcodeGreaterThan(String value) {
            addCriterion("LOGOPERATORCODE >", value, "logoperatorcode");
            return (Criteria) this;
        }

        public Criteria andLogoperatorcodeGreaterThanOrEqualTo(String value) {
            addCriterion("LOGOPERATORCODE >=", value, "logoperatorcode");
            return (Criteria) this;
        }

        public Criteria andLogoperatorcodeLessThan(String value) {
            addCriterion("LOGOPERATORCODE <", value, "logoperatorcode");
            return (Criteria) this;
        }

        public Criteria andLogoperatorcodeLessThanOrEqualTo(String value) {
            addCriterion("LOGOPERATORCODE <=", value, "logoperatorcode");
            return (Criteria) this;
        }

        public Criteria andLogoperatorcodeLike(String value) {
            addCriterion("LOGOPERATORCODE like", value, "logoperatorcode");
            return (Criteria) this;
        }

        public Criteria andLogoperatorcodeNotLike(String value) {
            addCriterion("LOGOPERATORCODE not like", value, "logoperatorcode");
            return (Criteria) this;
        }

        public Criteria andLogoperatorcodeIn(List<String> values) {
            addCriterion("LOGOPERATORCODE in", values, "logoperatorcode");
            return (Criteria) this;
        }

        public Criteria andLogoperatorcodeNotIn(List<String> values) {
            addCriterion("LOGOPERATORCODE not in", values, "logoperatorcode");
            return (Criteria) this;
        }

        public Criteria andLogoperatorcodeBetween(String value1, String value2) {
            addCriterion("LOGOPERATORCODE between", value1, value2, "logoperatorcode");
            return (Criteria) this;
        }

        public Criteria andLogoperatorcodeNotBetween(String value1, String value2) {
            addCriterion("LOGOPERATORCODE not between", value1, value2, "logoperatorcode");
            return (Criteria) this;
        }

        public Criteria andParentlogexpressionidIsNull() {
            addCriterion("PARENTLOGEXPRESSIONID is null");
            return (Criteria) this;
        }

        public Criteria andParentlogexpressionidIsNotNull() {
            addCriterion("PARENTLOGEXPRESSIONID is not null");
            return (Criteria) this;
        }

        public Criteria andParentlogexpressionidEqualTo(Long value) {
            addCriterion("PARENTLOGEXPRESSIONID =", value, "parentlogexpressionid");
            return (Criteria) this;
        }

        public Criteria andParentlogexpressionidNotEqualTo(Long value) {
            addCriterion("PARENTLOGEXPRESSIONID <>", value, "parentlogexpressionid");
            return (Criteria) this;
        }

        public Criteria andParentlogexpressionidGreaterThan(Long value) {
            addCriterion("PARENTLOGEXPRESSIONID >", value, "parentlogexpressionid");
            return (Criteria) this;
        }

        public Criteria andParentlogexpressionidGreaterThanOrEqualTo(Long value) {
            addCriterion("PARENTLOGEXPRESSIONID >=", value, "parentlogexpressionid");
            return (Criteria) this;
        }

        public Criteria andParentlogexpressionidLessThan(Long value) {
            addCriterion("PARENTLOGEXPRESSIONID <", value, "parentlogexpressionid");
            return (Criteria) this;
        }

        public Criteria andParentlogexpressionidLessThanOrEqualTo(Long value) {
            addCriterion("PARENTLOGEXPRESSIONID <=", value, "parentlogexpressionid");
            return (Criteria) this;
        }

        public Criteria andParentlogexpressionidIn(List<Long> values) {
            addCriterion("PARENTLOGEXPRESSIONID in", values, "parentlogexpressionid");
            return (Criteria) this;
        }

        public Criteria andParentlogexpressionidNotIn(List<Long> values) {
            addCriterion("PARENTLOGEXPRESSIONID not in", values, "parentlogexpressionid");
            return (Criteria) this;
        }

        public Criteria andParentlogexpressionidBetween(Long value1, Long value2) {
            addCriterion("PARENTLOGEXPRESSIONID between", value1, value2, "parentlogexpressionid");
            return (Criteria) this;
        }

        public Criteria andParentlogexpressionidNotBetween(Long value1, Long value2) {
            addCriterion("PARENTLOGEXPRESSIONID not between", value1, value2, "parentlogexpressionid");
            return (Criteria) this;
        }

        public Criteria andTopFlgIsNull() {
            addCriterion("TOP_FLG is null");
            return (Criteria) this;
        }

        public Criteria andTopFlgIsNotNull() {
            addCriterion("TOP_FLG is not null");
            return (Criteria) this;
        }

        public Criteria andTopFlgEqualTo(String value) {
            addCriterion("TOP_FLG =", value, "topFlg");
            return (Criteria) this;
        }

        public Criteria andTopFlgNotEqualTo(String value) {
            addCriterion("TOP_FLG <>", value, "topFlg");
            return (Criteria) this;
        }

        public Criteria andTopFlgGreaterThan(String value) {
            addCriterion("TOP_FLG >", value, "topFlg");
            return (Criteria) this;
        }

        public Criteria andTopFlgGreaterThanOrEqualTo(String value) {
            addCriterion("TOP_FLG >=", value, "topFlg");
            return (Criteria) this;
        }

        public Criteria andTopFlgLessThan(String value) {
            addCriterion("TOP_FLG <", value, "topFlg");
            return (Criteria) this;
        }

        public Criteria andTopFlgLessThanOrEqualTo(String value) {
            addCriterion("TOP_FLG <=", value, "topFlg");
            return (Criteria) this;
        }

        public Criteria andTopFlgLike(String value) {
            addCriterion("TOP_FLG like", value, "topFlg");
            return (Criteria) this;
        }

        public Criteria andTopFlgNotLike(String value) {
            addCriterion("TOP_FLG not like", value, "topFlg");
            return (Criteria) this;
        }

        public Criteria andTopFlgIn(List<String> values) {
            addCriterion("TOP_FLG in", values, "topFlg");
            return (Criteria) this;
        }

        public Criteria andTopFlgNotIn(List<String> values) {
            addCriterion("TOP_FLG not in", values, "topFlg");
            return (Criteria) this;
        }

        public Criteria andTopFlgBetween(String value1, String value2) {
            addCriterion("TOP_FLG between", value1, value2, "topFlg");
            return (Criteria) this;
        }

        public Criteria andTopFlgNotBetween(String value1, String value2) {
            addCriterion("TOP_FLG not between", value1, value2, "topFlg");
            return (Criteria) this;
        }

        public Criteria andLogexpressionnameIsNull() {
            addCriterion("LOGEXPRESSIONNAME is null");
            return (Criteria) this;
        }

        public Criteria andLogexpressionnameIsNotNull() {
            addCriterion("LOGEXPRESSIONNAME is not null");
            return (Criteria) this;
        }

        public Criteria andLogexpressionnameEqualTo(String value) {
            addCriterion("LOGEXPRESSIONNAME =", value, "logexpressionname");
            return (Criteria) this;
        }

        public Criteria andLogexpressionnameNotEqualTo(String value) {
            addCriterion("LOGEXPRESSIONNAME <>", value, "logexpressionname");
            return (Criteria) this;
        }

        public Criteria andLogexpressionnameGreaterThan(String value) {
            addCriterion("LOGEXPRESSIONNAME >", value, "logexpressionname");
            return (Criteria) this;
        }

        public Criteria andLogexpressionnameGreaterThanOrEqualTo(String value) {
            addCriterion("LOGEXPRESSIONNAME >=", value, "logexpressionname");
            return (Criteria) this;
        }

        public Criteria andLogexpressionnameLessThan(String value) {
            addCriterion("LOGEXPRESSIONNAME <", value, "logexpressionname");
            return (Criteria) this;
        }

        public Criteria andLogexpressionnameLessThanOrEqualTo(String value) {
            addCriterion("LOGEXPRESSIONNAME <=", value, "logexpressionname");
            return (Criteria) this;
        }

        public Criteria andLogexpressionnameLike(String value) {
            addCriterion("LOGEXPRESSIONNAME like", value, "logexpressionname");
            return (Criteria) this;
        }

        public Criteria andLogexpressionnameNotLike(String value) {
            addCriterion("LOGEXPRESSIONNAME not like", value, "logexpressionname");
            return (Criteria) this;
        }

        public Criteria andLogexpressionnameIn(List<String> values) {
            addCriterion("LOGEXPRESSIONNAME in", values, "logexpressionname");
            return (Criteria) this;
        }

        public Criteria andLogexpressionnameNotIn(List<String> values) {
            addCriterion("LOGEXPRESSIONNAME not in", values, "logexpressionname");
            return (Criteria) this;
        }

        public Criteria andLogexpressionnameBetween(String value1, String value2) {
            addCriterion("LOGEXPRESSIONNAME between", value1, value2, "logexpressionname");
            return (Criteria) this;
        }

        public Criteria andLogexpressionnameNotBetween(String value1, String value2) {
            addCriterion("LOGEXPRESSIONNAME not between", value1, value2, "logexpressionname");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table LOGICALEXPRESSION
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table LOGICALEXPRESSION
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}