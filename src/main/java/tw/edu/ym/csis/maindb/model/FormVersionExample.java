package tw.edu.ym.csis.maindb.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class FormVersionExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table FORMVERSION
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table FORMVERSION
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table FORMVERSION
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FORMVERSION
     *
     * @mbggenerated
     */
    public FormVersionExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FORMVERSION
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FORMVERSION
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FORMVERSION
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FORMVERSION
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FORMVERSION
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FORMVERSION
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FORMVERSION
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FORMVERSION
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FORMVERSION
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table FORMVERSION
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table FORMVERSION
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        protected void addCriterionForJDBCDate(String condition, Date value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value.getTime()), property);
        }

        protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
            Iterator<Date> iter = values.iterator();
            while (iter.hasNext()) {
                dateList.add(new java.sql.Date(iter.next().getTime()));
            }
            addCriterion(condition, dateList, property);
        }

        protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
        }

        public Criteria andIdIsNull() {
            addCriterion("ID is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("ID is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("ID =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("ID <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("ID >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("ID >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("ID <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("ID <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("ID in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("ID not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("ID between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("ID not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andCurrentFlgIsNull() {
            addCriterion("CURRENT_FLG is null");
            return (Criteria) this;
        }

        public Criteria andCurrentFlgIsNotNull() {
            addCriterion("CURRENT_FLG is not null");
            return (Criteria) this;
        }

        public Criteria andCurrentFlgEqualTo(String value) {
            addCriterion("CURRENT_FLG =", value, "currentFlg");
            return (Criteria) this;
        }

        public Criteria andCurrentFlgNotEqualTo(String value) {
            addCriterion("CURRENT_FLG <>", value, "currentFlg");
            return (Criteria) this;
        }

        public Criteria andCurrentFlgGreaterThan(String value) {
            addCriterion("CURRENT_FLG >", value, "currentFlg");
            return (Criteria) this;
        }

        public Criteria andCurrentFlgGreaterThanOrEqualTo(String value) {
            addCriterion("CURRENT_FLG >=", value, "currentFlg");
            return (Criteria) this;
        }

        public Criteria andCurrentFlgLessThan(String value) {
            addCriterion("CURRENT_FLG <", value, "currentFlg");
            return (Criteria) this;
        }

        public Criteria andCurrentFlgLessThanOrEqualTo(String value) {
            addCriterion("CURRENT_FLG <=", value, "currentFlg");
            return (Criteria) this;
        }

        public Criteria andCurrentFlgLike(String value) {
            addCriterion("CURRENT_FLG like", value, "currentFlg");
            return (Criteria) this;
        }

        public Criteria andCurrentFlgNotLike(String value) {
            addCriterion("CURRENT_FLG not like", value, "currentFlg");
            return (Criteria) this;
        }

        public Criteria andCurrentFlgIn(List<String> values) {
            addCriterion("CURRENT_FLG in", values, "currentFlg");
            return (Criteria) this;
        }

        public Criteria andCurrentFlgNotIn(List<String> values) {
            addCriterion("CURRENT_FLG not in", values, "currentFlg");
            return (Criteria) this;
        }

        public Criteria andCurrentFlgBetween(String value1, String value2) {
            addCriterion("CURRENT_FLG between", value1, value2, "currentFlg");
            return (Criteria) this;
        }

        public Criteria andCurrentFlgNotBetween(String value1, String value2) {
            addCriterion("CURRENT_FLG not between", value1, value2, "currentFlg");
            return (Criteria) this;
        }

        public Criteria andFormidIsNull() {
            addCriterion("FORMID is null");
            return (Criteria) this;
        }

        public Criteria andFormidIsNotNull() {
            addCriterion("FORMID is not null");
            return (Criteria) this;
        }

        public Criteria andFormidEqualTo(Long value) {
            addCriterion("FORMID =", value, "formid");
            return (Criteria) this;
        }

        public Criteria andFormidNotEqualTo(Long value) {
            addCriterion("FORMID <>", value, "formid");
            return (Criteria) this;
        }

        public Criteria andFormidGreaterThan(Long value) {
            addCriterion("FORMID >", value, "formid");
            return (Criteria) this;
        }

        public Criteria andFormidGreaterThanOrEqualTo(Long value) {
            addCriterion("FORMID >=", value, "formid");
            return (Criteria) this;
        }

        public Criteria andFormidLessThan(Long value) {
            addCriterion("FORMID <", value, "formid");
            return (Criteria) this;
        }

        public Criteria andFormidLessThanOrEqualTo(Long value) {
            addCriterion("FORMID <=", value, "formid");
            return (Criteria) this;
        }

        public Criteria andFormidIn(List<Long> values) {
            addCriterion("FORMID in", values, "formid");
            return (Criteria) this;
        }

        public Criteria andFormidNotIn(List<Long> values) {
            addCriterion("FORMID not in", values, "formid");
            return (Criteria) this;
        }

        public Criteria andFormidBetween(Long value1, Long value2) {
            addCriterion("FORMID between", value1, value2, "formid");
            return (Criteria) this;
        }

        public Criteria andFormidNotBetween(Long value1, Long value2) {
            addCriterion("FORMID not between", value1, value2, "formid");
            return (Criteria) this;
        }

        public Criteria andFormversionIsNull() {
            addCriterion("FORMVERSION is null");
            return (Criteria) this;
        }

        public Criteria andFormversionIsNotNull() {
            addCriterion("FORMVERSION is not null");
            return (Criteria) this;
        }

        public Criteria andFormversionEqualTo(Long value) {
            addCriterion("FORMVERSION =", value, "formversion");
            return (Criteria) this;
        }

        public Criteria andFormversionNotEqualTo(Long value) {
            addCriterion("FORMVERSION <>", value, "formversion");
            return (Criteria) this;
        }

        public Criteria andFormversionGreaterThan(Long value) {
            addCriterion("FORMVERSION >", value, "formversion");
            return (Criteria) this;
        }

        public Criteria andFormversionGreaterThanOrEqualTo(Long value) {
            addCriterion("FORMVERSION >=", value, "formversion");
            return (Criteria) this;
        }

        public Criteria andFormversionLessThan(Long value) {
            addCriterion("FORMVERSION <", value, "formversion");
            return (Criteria) this;
        }

        public Criteria andFormversionLessThanOrEqualTo(Long value) {
            addCriterion("FORMVERSION <=", value, "formversion");
            return (Criteria) this;
        }

        public Criteria andFormversionIn(List<Long> values) {
            addCriterion("FORMVERSION in", values, "formversion");
            return (Criteria) this;
        }

        public Criteria andFormversionNotIn(List<Long> values) {
            addCriterion("FORMVERSION not in", values, "formversion");
            return (Criteria) this;
        }

        public Criteria andFormversionBetween(Long value1, Long value2) {
            addCriterion("FORMVERSION between", value1, value2, "formversion");
            return (Criteria) this;
        }

        public Criteria andFormversionNotBetween(Long value1, Long value2) {
            addCriterion("FORMVERSION not between", value1, value2, "formversion");
            return (Criteria) this;
        }

        public Criteria andVersiondateIsNull() {
            addCriterion("VERSIONDATE is null");
            return (Criteria) this;
        }

        public Criteria andVersiondateIsNotNull() {
            addCriterion("VERSIONDATE is not null");
            return (Criteria) this;
        }

        public Criteria andVersiondateEqualTo(Date value) {
            addCriterionForJDBCDate("VERSIONDATE =", value, "versiondate");
            return (Criteria) this;
        }

        public Criteria andVersiondateNotEqualTo(Date value) {
            addCriterionForJDBCDate("VERSIONDATE <>", value, "versiondate");
            return (Criteria) this;
        }

        public Criteria andVersiondateGreaterThan(Date value) {
            addCriterionForJDBCDate("VERSIONDATE >", value, "versiondate");
            return (Criteria) this;
        }

        public Criteria andVersiondateGreaterThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("VERSIONDATE >=", value, "versiondate");
            return (Criteria) this;
        }

        public Criteria andVersiondateLessThan(Date value) {
            addCriterionForJDBCDate("VERSIONDATE <", value, "versiondate");
            return (Criteria) this;
        }

        public Criteria andVersiondateLessThanOrEqualTo(Date value) {
            addCriterionForJDBCDate("VERSIONDATE <=", value, "versiondate");
            return (Criteria) this;
        }

        public Criteria andVersiondateIn(List<Date> values) {
            addCriterionForJDBCDate("VERSIONDATE in", values, "versiondate");
            return (Criteria) this;
        }

        public Criteria andVersiondateNotIn(List<Date> values) {
            addCriterionForJDBCDate("VERSIONDATE not in", values, "versiondate");
            return (Criteria) this;
        }

        public Criteria andVersiondateBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("VERSIONDATE between", value1, value2, "versiondate");
            return (Criteria) this;
        }

        public Criteria andVersiondateNotBetween(Date value1, Date value2) {
            addCriterionForJDBCDate("VERSIONDATE not between", value1, value2, "versiondate");
            return (Criteria) this;
        }

        public Criteria andCustomFormatIsNull() {
            addCriterion("CUSTOM_FORMAT is null");
            return (Criteria) this;
        }

        public Criteria andCustomFormatIsNotNull() {
            addCriterion("CUSTOM_FORMAT is not null");
            return (Criteria) this;
        }

        public Criteria andCustomFormatEqualTo(String value) {
            addCriterion("CUSTOM_FORMAT =", value, "customFormat");
            return (Criteria) this;
        }

        public Criteria andCustomFormatNotEqualTo(String value) {
            addCriterion("CUSTOM_FORMAT <>", value, "customFormat");
            return (Criteria) this;
        }

        public Criteria andCustomFormatGreaterThan(String value) {
            addCriterion("CUSTOM_FORMAT >", value, "customFormat");
            return (Criteria) this;
        }

        public Criteria andCustomFormatGreaterThanOrEqualTo(String value) {
            addCriterion("CUSTOM_FORMAT >=", value, "customFormat");
            return (Criteria) this;
        }

        public Criteria andCustomFormatLessThan(String value) {
            addCriterion("CUSTOM_FORMAT <", value, "customFormat");
            return (Criteria) this;
        }

        public Criteria andCustomFormatLessThanOrEqualTo(String value) {
            addCriterion("CUSTOM_FORMAT <=", value, "customFormat");
            return (Criteria) this;
        }

        public Criteria andCustomFormatLike(String value) {
            addCriterion("CUSTOM_FORMAT like", value, "customFormat");
            return (Criteria) this;
        }

        public Criteria andCustomFormatNotLike(String value) {
            addCriterion("CUSTOM_FORMAT not like", value, "customFormat");
            return (Criteria) this;
        }

        public Criteria andCustomFormatIn(List<String> values) {
            addCriterion("CUSTOM_FORMAT in", values, "customFormat");
            return (Criteria) this;
        }

        public Criteria andCustomFormatNotIn(List<String> values) {
            addCriterion("CUSTOM_FORMAT not in", values, "customFormat");
            return (Criteria) this;
        }

        public Criteria andCustomFormatBetween(String value1, String value2) {
            addCriterion("CUSTOM_FORMAT between", value1, value2, "customFormat");
            return (Criteria) this;
        }

        public Criteria andCustomFormatNotBetween(String value1, String value2) {
            addCriterion("CUSTOM_FORMAT not between", value1, value2, "customFormat");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table FORMVERSION
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table FORMVERSION
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}